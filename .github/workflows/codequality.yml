name: codequality

on:
  push:
    branches:
      - '*'
  pull_request:
    branches: [ "master" ]

jobs:
  phpstan:
    runs-on: ubuntu-latest

    # see https://github.com/shivammathur/setup-php for more information
    steps:
    - uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'
    - uses: actions/checkout@v4
    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"
    - name: Validate composer.json and composer.lock
      run: composer validate --strict

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v4
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-interaction

    - name: Execute larastan
      run: ./vendor/bin/phpstan analyse
  
  phpcs:
    runs-on: ubuntu-latest

    # see https://github.com/shivammathur/setup-php for more information
    steps:
    - uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'
    - uses: actions/checkout@v4
    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"
    - name: Validate composer.json and composer.lock
      run: composer validate --strict

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v4
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-interaction

    - name: Execute php cs
      run: ./vendor/bin/ecs check ./app ./tests --config ecs.php
  
  laravel-tests:
    runs-on: ubuntu-latest

    # see https://github.com/shivammathur/setup-php for more information
    steps:
    - uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'
    - uses: actions/checkout@v4
    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"
    - name: Validate composer.json and composer.lock
      run: composer validate --strict

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v4
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-interaction

    - name: Generate key
      run: php artisan key:generate
    - name: Directory Permissions
      run: chmod -R 777 storage bootstrap/cache
    - name: Create Database
      run: |
        mkdir -p database
        touch database/database.sqlite
    - name: Execute tests (Unit and Feature tests) via PHPUnit
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: database/database.sqlite
      run: vendor/bin/phpunit  --exclude-testsuite Integration
    
  build-and-push-backend:
    # needs: [laravel-tests, phpcs, phpstan]
    runs-on: ubuntu-latest
    steps:
      - uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
      - uses: actions/checkout@v4

      - name: Validate composer.json and composer.lock
        run: composer validate --strict

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build image
        run: |
          pwd
          ls -lah .

          cd build

          docker image build --load -f Dockerfile --build-arg WWWUSER=501 --build-arg WWWGROUP=501 \
            --target base \
            -t planereservation:php8.3 .
          
          docker image build -f app.Dockerfile --squash --compress \
            --build-arg SOURCE_SYSTEM_IMAGE="planereservation:php8.3" \
            --build-arg WWWUSER=501 --build-arg WWWGROUP=501 \
            --target prod \
            -t registry.digitalocean.com/aeroklubostrowski/planereservation:app-1.0 ./..

          docker image ls

      - name: Log in to DigitalOcean Container Registry
        run: doctl registry login --expiry-seconds 600

      - name: Push image to DigitalOcean Container Registry
        run: docker push registry.digitalocean.com/aeroklubostrowski/planereservation:app-1.0
